/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4.1/userguide/custom_plugins.html
 */

plugins {
    id 'java'

    id 'org.springframework.boot' version '2.6.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'

    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'

    // Apply the Groovy plugin to add support for Groovy
    id 'groovy'

    // Plugin for publishing a project to a repository
    id 'maven-publish'

    // Get plugin from mavenLocal()
    id 'com.gmail.arthurstrokov.plugin.testGradleDatabaseInitializationPlugin' version '0.0.1-SNAPSHOT'
}

group = 'com.gmail.arthurstrokov'
version = '0.0.1-SNAPSHOT'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use the awesome Spock testing and specification framework
    testImplementation 'org.spockframework:spock-core:2.0-groovy-3.0'

    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc:2.6.4'
    runtimeOnly 'org.springframework.boot:spring-boot-devtools:2.6.4'
    runtimeOnly 'org.postgresql:postgresql:42.3.3'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.6.4'
}

gradlePlugin {
    // Define the plugin
    plugins {
        greeting {
            id = 'com.gmail.arthurstrokov.plugin.testGradleDatabaseInitializationPlugin'
            implementationClass = 'com.gmail.arthurstrokov.plugin.TestGradleDatabaseInitializationPluginPlugin'
        }
    }
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    useJUnitPlatform()
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)

tasks.named('check') {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

tasks.named('test') {
    // Use JUnit Jupiter for unit tests.
    useJUnitPlatform()
}

bootJar {
    enabled = false
}

jar {
    enabled = true
}
